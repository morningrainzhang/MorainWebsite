[program:celery-queue-fetch]
;程序要执行的命令, -Q 指定了生成和接受任务的队列,多个用都好分开 -c为workr的数量,原意为并发数量
command=/root/virtualenvs/env3/bin/python3 /var/www/html/MorainWebsite/manage.py celery worker --loglevel=DEBUG
;程序执行时候所在目录
directory=/var/www/html/MorainWebsite/
;执行程序使用的用户
user=root
;启动的程序的实例数,默认是1
numprocs=1
stdout_logfile=/var/www/html/MorainWebsite/log/celery.log
stderr_logfile=/var/www/html/MorainWebsite/log/celery.log
stdout_logfile_maxbytes = 50MB
stdout_logfile_backups  = 10
;在启动supervisor时候自动启动
autostart=true
;当程序可能因为某些原因没有启动成功会自动重启
autorestart=true
;启动的等待时候,我想是为了重启能杀掉原来进程预留的时间
startsecs=10
;进程发送停止信号等待os返回SIGCHILD的时间
stopwaitsecs=10
;低优先级的会首先启动最后关闭
priority=998
;以下2句是为了保证杀掉进程和其子进程而不会只杀死其控制的程序主进程而留下子进程变为孤立进程的问题
stopsignal=KILL
stopasgroup=true


[program:celerybeat]
command=/root/virtualenvs/env3/bin/python3 /var/www/html/MorainWebsite/manage.py celery beat --loglevel=WARNING
directory=/var/www/html/MorainWebsite/
user=root
numprocs=1
stdout_logfile=/var/www/html/MorainWebsite/log/celery_beat.log
stderr_logfile=/var/www/html/MorainWebsite/log/celery_beat.log
stdout_logfile_maxbytes = 50MB
stdout_logfile_backups  = 10
autostart=true
autorestart=true
startsecs=10
priority=999
stopsignal=KILL
stopasgroup=true
